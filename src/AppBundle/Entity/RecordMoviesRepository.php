<?php

namespace AppBundle\Entity;

/**
 * RecordMoviesRepository
 * @author Anthony
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecordMoviesRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * addRecordMovies function.
     * Ajout d'une fiche de film
     * @access public
     * @param string $title
     * @param string $realisator (default: null)
     * @return id de l'entity créée
     */
    public function addRecordMovies($title, $realisator = null)
    {
        /**
         * recordMovie
         * Instancie la classe RecordMovies dans la variable $recordMovie
         * (default value: new RecordMovies($title, $realisator))
         * @var mixed
         * @access public
         */
        $recordMovie = new RecordMovies($title, $realisator);
        $this->_em->persist($recordMovie);
        $this->_em->flush();
        /**
         * Retourne l'identifiant de l'entité enregistrée
         */
        return $recordMovie->getId();
    }

    /**
     * getByDates function.
     * Recherche des fiches de films entre deux dates
     * @access public
     * @param string $from
     * @param string $to
     * @return les entitées trouvées entre ses deux dates
     */
    public function getByDates($from, $to)
    {
        /**
         * fromDate
         * (default value: null)
         * @var mixed
         * @access public
         */
        $fromDate = null;
        /**
         * toDate
         * (default value: null)
         * @var mixed
         * @access public
         */
        $toDate = null;
        /**
         * Test si le retour de la fonction ne renvoie pas false
         */
        if ($this->createDate($from) != false)
        {
            $fromDate = $this->createDate($from);
        }
        /**
         * Retourne un code erreur en cas de problème
         */
        else
        {
            return "-1";
        }
        /**
         * Test si le retour de la fonction ne renvoie pas false
         */
        if ($this->createDate($to) != false)
        {
            $toDate = $this->createDate($to);
        }
        /**
         * Retourne un code erreur en cas de problème
         */
        else
        {
            return "-2";
        }
        /**
         * Requête pour récupérer l'ensemble des résultats entre les deux dates
         */
        $qb = $this->_em->createQueryBuilder()
                   ->select('rm')
                   ->from('AppBundle:RecordMovies','rm')
                   ->where('rm.from >= :from and rm.to <= :to')
                   ->setParameters(array('from' => $fromDate, 'to' => $toDate));
        /**
         * Retourne l'ensemble des résultats
         */
        return $qb->getQuery()->getResult();
    }

    /**
     * createDate function.
     * Créer une objet DateTime par rapport à entier
     * @access private
     * @param mixed $arg
     * @return DateTime ou false
     */
    private function createDate($arg)
    {
        /**
         * Test si le paramètre est bien un entier
         */
        if (is_int($arg))
        {
            /**
             * Initialise la variable à partir des segments de chaîne
             */
            $date = substr($arg, 0, 4) .'-'. substr($arg, 4,2) .'-'. substr($arg, 6,2);
            /**
             * Retourne un DateTime initialisé avec la chaîne précédente
             */
            return new \DateTime($date);
        }
        /**
         * Retourne false si le paramètre n'est pas un entier
         */
        else
        {
            return false;
        }
    }
}
